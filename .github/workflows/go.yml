name: Go
on:
  pull_request:
    branches: [master]
jobs:

  build:
    name: ${{ matrix.name }}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name:
          - macos-clang
          - ubuntu-clang
          - ubuntu-gcc
          - windows-gcc
        include:
          - name: macos-clang
            os: macos-latest
            cc: clang
          - name: ubuntu-clang
            os: ubuntu-latest
            cc: clang
          - name: ubuntu-gcc
            os: ubuntu-latest
            cc: gcc
          - name: windows-gcc
            os: windows-latest
            cc: gcc

    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Install apt dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get --assume-yes install python3-wheel python3-setuptools
      - name: Install dependencies
        if: matrix.os != 'windows-latest'
        run: pip3 install --user meson ninja
      - uses: actions/setup-python@v2
        if: matrix.os == 'windows-latest'
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install meson ninja

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      # Go binary

      - name: Run unit tests (*nix)
        if: matrix.os != 'windows-latest'
        run: |
          export PATH=${HOME}/Library/Python/3.8/bin:${HOME}/Library/Python/3.9/bin:${HOME}/.local/bin:${PATH}
          go test ./... -race -coverprofile=coverage.txt -covermode=atomic
      - name: Run unit tests (Windows)
        if: matrix.os == 'windows-latest'
        run: go test ./... -race -coverprofile=coverage.txt -covermode=atomic

      - name: Build the Go binary
        run: make rz-pm

      - name: Initialize the database
        run: ./rz-pm --debug init

      - name: Make sure jsdec is present in the database
        run: ./rz-pm --debug search dec | grep -q 'converts asm to pseudo-C code'

      - name: Install from a package file
        run: ./rz-pm --debug install -f test/test.yaml

      - name: Check that the package above was correctly installed
        run: ./rz-pm --debug list installed | grep -q test

      - name: Delete the local database
        run: ./rz-pm --debug delete

      # C binary

      - name: Build the C binary
        run: make rzpm_c
        env: {CC: "${{matrix.cc}}"}

      - name: Initialize the database
        run: ./rzpm_c init
        env:
          LD_LIBRARY_PATH: .  # for Linux
          RZPM_DEBUG: 1

      - name: Check that jsdec is available
        run: ./rzpm_c list-available | grep -q jsdec
        env:
          LD_LIBRARY_PATH: .  # for Linux
          RZPM_DEBUG: 1

      - name: Delete the local database
        run: ./rzpm_c delete
        env:
          LD_LIBRARY_PATH: .  # for Linux
          RZPM_DEBUG: 1

      - name: Run integration tests
        if: matrix.os != 'windows-latest'
        run: |
          export PATH=${HOME}/Library/Python/3.8/bin:${HOME}/Library/Python/3.9/bin:${HOME}/.local/bin:${PATH}
          make integration-tests
        env: {RZ_VERSION: v0.1.0}

      - name: Run integration tests (Windows)
        if: matrix.os == 'windows-latest'
        run: make integration-tests
        env: {RZ_VERSION: v0.1.0}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
