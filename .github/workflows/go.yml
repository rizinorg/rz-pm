name: Go
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  GO_VERSION: "1.22"
  RIZIN_VERSION: "v0.8.0"
  PYTHON_VERSION: "3.10"
  RIZIN_DIR: "${{ github.workspace }}/rizin-build"
  RZ_PM_DIR: "${{ github.workspace }}/rz-pm"

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name:
          - macos
          - ubuntu
          - windows
        include:
          - name: macos
            os: macos-latest
            prefix: /usr/local
            sudo: sudo env "PATH=$PATH"
          - name: ubuntu
            os: ubuntu-22.04
            prefix: /usr
            sudo: sudo env "PATH=$PATH"
          - name: windows
            os: windows-latest
            prefix: D:\
            sudo: ""
            meson_options: -Dportable=true -Db_vscrt=static_from_buildtype

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install meson ninja
      - uses: seanmiddleditch/gha-setup-vsdevenv@master
        if: matrix.os == 'windows-latest'
      - name: Cache rizin build dir
        uses: actions/cache@v4
        id: cache-rizin-build
        with:
          key: rizin-build-${{ matrix.os }}-${{ env.RIZIN_VERSION }}
          path: ${{ env.RIZIN_DIR }}
      - name: Build Rizin
        if: steps.cache-rizin-build.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/rizinorg/rizin ${{ env.RIZIN_DIR }}
          cd ${{ env.RIZIN_DIR }}
          git checkout ${{ env.RIZIN_VERSION }}
          meson --buildtype=release --prefix=${{ matrix.prefix }} ${{ matrix.meson_options }} build
          meson compile ${{ matrix.os == 'windows-latest' && '-j1' || '' }} -C build
      - name: Install Rizin
        run: |
          cd ${{ env.RIZIN_DIR }}
          ${{ matrix.sudo }} meson install -C build
      - name: Add rizin dir to PATH
        if: matrix.os == 'windows-latest'
        run: |
          echo "D:/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Set up Golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          path: ${{ env.RZ_PM_DIR }}
      - name: Run unit tests
        run: go test ./... -race -coverprofile=coverage.txt -covermode=atomic
        working-directory: ${{ env.RZ_PM_DIR }}
      - name: Build the Go binary
        run: go build
        working-directory: ${{ env.RZ_PM_DIR }}
      - name: Make sure jsdec is present in the database
        run: ./rz-pm list | grep -q 'Converts asm to pseudo-C code'
        working-directory: ${{ env.RZ_PM_DIR }}
      - name: Install jsdec
        run: ./rz-pm install jsdec
        working-directory: ${{ env.RZ_PM_DIR }}
      - name: Check jsdec
        run: ls $(rizin -H RZ_USER_PLUGINS) | grep core_pdd
